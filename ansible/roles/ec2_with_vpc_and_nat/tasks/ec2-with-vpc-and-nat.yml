---

- name: bundle-and-upload-ec2-init-script-to-s3
  shell: >
    ./../bin/bundle_and_upload_ec2_init_package.py ec2-init-scripts v0.0.1
  args:
    executable: /bin/bash
  register: ec2_init_scripts_uploaded

- name: cp-init-script-to-s3
  shell: >
    aws s3 cp ./../bin/fetch-exec-init-package.sh s3://ec2-init-scripts/
  args:
    executable: /bin/bash
  register: ec2_init_script_loader_uploaded
  when: ec2_init_scripts_uploaded|success

- set_fact:
    stack_name: "{{ instance.name | regex_replace('[_.]', '-') }}-{{ region }}-stack"

- name: is_stack_present
  shell: aws cloudformation describe-stacks --region "{{ region }}" --stack-name "{{ stack_name }}"
  args:
    executable: /bin/bash
  register: is_stack_present
  ignore_errors: yes

- name: "{{ stack_name }}"
  cloudformation:
    stack_name: "{{ stack_name }}"
    region: "{{ region }}"
    state: "{{ stack_status }}"
    template: "roles/ec2_with_vpc_and_nat/files/ec2-with-vpc-and-nat-cf.json"
    template_parameters:
      Name: "{{ instance.name }}"
      KeyName: "{{ key_name }}"
      InstanceType: "{{ instance.type }}"
      VpcStackName: "vpc-with-nat-{{ region }}-stack"
      SecurityGroupStackName: "security-groups-{{ region }}-stack"
      SubnetType: "{{ instance.subnet }}"
      EC2InitScriptS3Bucket: "ec2-init-scripts"
      EC2InitScriptS3Object: "fetch-exec-init-package.sh"
      EC2InitScriptsVersion: "{{ instance.init_script_version }}"
  when: (stack_status == 'present' and ec2_init_script_loader_uploaded) or (stack_status == 'absent' and is_stack_present|success)

- name: "collect-{{ stack_name }}"
  cloudformation_facts:
    stack_name: "{{ stack_name }}"
    all_facts: true
    region: "{{ region }}"
  when: stack_status == "present"

- set_fact:
    "{{ instance.name | regex_replace('[-.]', '_') }}_{{ region | regex_replace('[-.]', '_') }}_facts": "{{ cloudformation }}"
  when: not ansible_check_mode and stack_status == "present"
