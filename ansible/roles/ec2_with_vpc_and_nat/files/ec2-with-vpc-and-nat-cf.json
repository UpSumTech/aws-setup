{
  "AWSTemplateFormatVersion": "2010-09-09",

  "Description": "Creates EC2 instance inside a VPC with nat",

  "Parameters": {
    "Name": {
      "Description": "The name of the service this instance is going to provide",
      "Type": "String"
    },

    "KeyName": {
      "Description": "EC2 KeyPair to enable SSH access",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription": "This must be an existing EC2 KeyPair"
    },

    "InstanceType": {
      "Description": "EC2 instance type",
      "Type": "String",
      "Default": "micro",
      "AllowedValues": [
        "micro",
        "small",
        "medium"
      ]
      ,
      "ConstraintDescription": "This must be a valid EC2 instance type"
    },

    "VpcStackName": {
      "Description": "The VPC stack name",
      "Type": "String",
      "ConstraintDescription": "This must be an existing VPC stack name"
    },

    "SecurityGroupStackName": {
      "Description": "The security group stack name",
      "Type": "String",
      "ConstraintDescription": "This must be an existing stack name for security groups"
    },

    "SubnetType": {
      "Description": "The type of the subnet for the instance",
      "Type": "String",
      "ConstraintDescription": "This must be either public1|private1|public2|private2"
    },

    "EC2InitScriptS3Bucket": {
      "Description": "The S3 bucket containing the init script for the instance",
      "Type": "String"
    },

    "EC2InitScriptS3Object": {
      "Description": "The S3 object containing the init script for the instance",
      "Type": "String"
    },

    "EC2InitScriptsVersion": {
      "Description": "The version of init scripts",
      "Type": "String"
    }
  },

  "Mappings": {
    "AWSClassType2InstanceType": {
      "micro": {"class": "t2.micro"},
      "small": {"class": "t2.small"},
      "medium": {"class": "t2.medium"}
    },

    "AWSInstanceType2Arch": {
      "t2.micro"    : { "Arch": "HVM64" },
      "t2.small"    : { "Arch": "HVM64" },
      "t2.medium"   : { "Arch": "HVM64" }
    },

    "AWSRegionArch2AMI": {
      "us-east-1"        : { "HVM64": "ami-d15a75c7" },
      "us-east-2"        : { "HVM64": "ami-8b92b4ee" },
      "us-west-1"        : { "HVM64": "ami-73f7da13" },
      "us-west-2"        : { "HVM64": "ami-835b4efa" },
      "ca-central-1"     : { "HVM64": "ami-b3d965d7" },
      "eu-west-1"        : { "HVM64": "ami-6d48500b" },
      "eu-west-2"        : { "HVM64": "ami-cc7066a8" },
      "eu-central-1"     : { "HVM64": "ami-1c45e273" },
      "ap-southeast-1"   : { "HVM64": "ami-2378f540" },
      "ap-southeast-2"   : { "HVM64": "ami-e94e5e8a" },
      "ap-south-1"       : { "HVM64": "ami-49e59a26" }
    },

    "SubnetTypeMap": {
      "public1": {
        "SGImportName": "PublicSubnetSecurityGroupId",
        "SubnetImportName": "PublicSubnetId1"
      },
      "private1": {
        "SGImportName": "PrivateSubnetSecurityGroupId",
        "SubnetImportName": "PrivateSubnetId1"
      },
      "public2": {
        "SGImportName": "PublicSubnetSecurityGroupId",
        "SubnetImportName": "PublicSubnetId2"
      },
      "private2": {
        "SGImportName": "PrivateSubnetSecurityGroupId",
        "SubnetImportName": "PrivateSubnetId2"
      }
    }
  },

  "Conditions" : {
    "IsPublicSubnet" : {
      "Fn::Or": [
        {"Fn::Equals" : [{"Ref" : "SubnetType"}, "public1"]},
        {"Fn::Equals" : [{"Ref" : "SubnetType"}, "public2"]}
      ]
    }
  },

  "Resources": {
    "EC2Instance": {
      "Type": "AWS::EC2::Instance",
      "Metadata": {
        "AWS::CloudFormation::Init" : {
          "configSets": {
            "ConfigureFetchExec" : [ "InstallDeps", "Configure", "Fetch", "Exec", "Ready" ]
          },

          "InstallDeps": {
            "packages": {
              "apt": {
                "coreutils": [],
                "libreadline-dev": [],
                "libssl-dev": [],
                "libffi-dev": [],
                "libbz2-dev": [],
                "libsqlite3-dev": [],
                "build-essential": [],
                "ruby": []
              },
              "python": {
                "awscli": []
              }
            }
          },

          "Configure": {
            "files": {
              "/etc/cfn/cfn-hup.conf" : {
                "content" : { "Fn::Join" : ["", [
                  "[main]\n",
                  "stack=", { "Ref" : "AWS::StackId" }, "\n",
                  "region=", { "Ref" : "AWS::Region" }, "\n",
                  "interval=10", "\n"
                ]]},
                "mode"    : "000400",
                "owner"   : "root",
                "group"   : "root"
              },

              "/etc/cfn/hooks.d/cfn-auto-reloader.conf" : {
                "content": { "Fn::Join" : ["", [
                  "[cfn-auto-reloader-hook]\n",
                  "triggers=post.update\n",
                  "path=Resources.EC2Instance.Metadata.AWS::CloudFormation::Init\n",
                  "action=/usr/local/bin/cfn-init -v ",
                  "         --stack ", { "Ref" : "AWS::StackName" },
                  "         --resource EC2Instance ",
                  "         --configsets ConfigureFetchExec ",
                  "         --region ", { "Ref" : "AWS::Region" }, "\n",
                  "runas=root", "\n"
                ]]}
              }
            }
          },

          "Fetch": {
            "commands": {
              "0_fetch_init_script_from_s3": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "aws s3 cp s3://",
                      { "Ref": "EC2InitScriptS3Bucket" }, "/", { "Ref": "EC2InitScriptS3Object" }, " ."
                    ]
                  ]
                },
                "cwd": "/usr/local/bin",
                "ignoreErrors": "false"
              },

              "1_change_file_perms": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "chmod 0700 ",
                      { "Ref": "EC2InitScriptS3Object" }
                    ]
                  ]
                },
                "cwd": "/usr/local/bin",
                "ignoreErrors": "false"
              }
            }
          },

          "Exec": {
            "commands": {
              "0_exec_ec2_init_script": {
                "command": {
                  "Fn::Join": [
                    "",
                    [
                      "/usr/bin/env ", "bash ", "/usr/local/bin/", { "Ref": "EC2InitScriptS3Object" },
                      " -b ", { "Ref": "EC2InitScriptS3Bucket"}, " -v ", { "Ref": "EC2InitScriptsVersion"}
                    ]
                  ]
                },
                "cwd": "/usr/local/bin",
                "ignoreErrors": "false"
              }
            }
          },

          "Ready": {
            "services": {
              "sysvinit": {
                "cfn-hup" : {
                  "enabled": "true",
                  "ensureRunning": "true",
                  "files": [
                    "/etc/cfn/cfn-hup.conf",
                    "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
                  ]
                },

                "docker": {
                  "enabled": "true",
                  "ensureRunning": "true"
                }
              }
            }
          }
        }
      },

      "Properties": {
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash -xe\n",
                "set -o pipefail\n",
                "apt-get update\n",
                "apt-get -y install python-pip\n",
                "pip install --upgrade pip\n",
                "pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\n",
                "pip install awscli\n",
                "cp /usr/local/init/ubuntu/cfn-hup /etc/init.d/cfn-hup \n",
                "chmod +x /etc/init.d/cfn-hup \n",
                "update-rc.d cfn-hup defaults \n ",
                "service cfn-hup start \n",

                "# Install and run cloudformation init data from metadata\n",
                "/usr/local/bin/cfn-init -v ",
                "         --stack ", { "Ref" : "AWS::StackName" },
                "         --resource EC2Instance ",
                "         --configsets ConfigureFetchExec ",
                "         --region ", { "Ref" : "AWS::Region" }, "\n",

                "# Signal the output status from cfn-init\n",
                "/opt/aws/bin/cfn-signal -e $? ",
                "         --stack ", {"Ref": "AWS::StackName"},
                "         --resource EC2Instance",
                "         --region ", {"Ref": "AWS::Region"}, "\n"
              ]
            ]
          }
        },

        "InstanceType": {"Fn::FindInMap": ["AWSClassType2InstanceType", {"Ref": "InstanceType"}, "class"]},
        "KeyName": { "Ref": "KeyName" },
        "ImageId": {
          "Fn::FindInMap": [
            "AWSRegionArch2AMI",
            { "Ref": "AWS::Region" },
            {
              "Fn::FindInMap": [
                "AWSInstanceType2Arch",
                {"Fn::FindInMap": ["AWSClassType2InstanceType", {"Ref": "InstanceType"}, "class"]},
                "Arch"
              ]
            }
          ]
        },
        "NetworkInterfaces" : [{
          "GroupSet": [
            {
              "Fn::ImportValue": {
                "Fn::Sub": [
                  "${StackName}-${GroupIdImportName}",
                  {
                    "StackName": {"Ref": "SecurityGroupStackName"},
                    "GroupIdImportName": {"Fn::FindInMap": ["SubnetTypeMap", {"Ref": "SubnetType"}, "SGImportName"]}
                  }
                ]
              }
            }
          ],
          "AssociatePublicIpAddress": { "Fn::If": [ "IsPublicSubnet", "true", "false" ] },
          "DeviceIndex": "0",
          "DeleteOnTermination": "true",
          "SubnetId": {
            "Fn::ImportValue": {
              "Fn::Sub": [
                "${StackName}-${SubnetIdImportName}",
                {
                  "StackName": {"Ref": "VpcStackName"},
                  "SubnetIdImportName": {"Fn::FindInMap": ["SubnetTypeMap", {"Ref": "SubnetType"}, "SubnetImportName"]}
                }
              ]
            }
          }
        }],
        "IamInstanceProfile": { "Ref": "EC2InstanceProfile" },
        "Monitoring": "false",
        "InstanceInitiatedShutdownBehavior": "stop",
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Join" : [
                "-",
                [
                  "Private",
                  { "Ref" : "SubnetType" }
                ]
              ]
            }
          }
        ]
      }
    },

    "IPAddress": {
      "Type": "AWS::EC2::EIP",
      "Condition": "IsPublicSubnet",
      "Properties": {
        "Domain": "vpc"
      }
    },

    "IPAssoc": {
      "Type": "AWS::EC2::EIPAssociation",
      "Condition": "IsPublicSubnet",
      "Properties": {
        "InstanceId": { "Ref": "EC2Instance" },
        "EIP": { "Ref": "IPAddress" }
      }
    },

    "EC2InstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          "compute-role"
        ]
      }
    }
  },

  "Outputs": {
    "InstanceId": {
      "Description": "InstanceId of the newly created EC2 instance",
      "Value": { "Ref": "EC2Instance" },
      "Export": {
        "Name": {
          "Fn::Join" : [
            "-",
            [
              { "Ref" : "AWS::StackName" },
              "InstanceId",
            ]
          ]
        }
      }
    },

    "AZ": {
      "Description": "Availability Zone of the newly created EC2 instance",
      "Value": { "Fn::GetAtt": [ "EC2Instance", "AvailabilityZone" ] },
      "Export": {
        "Name": {
          "Fn::Join" : [
            "-",
            [
              { "Ref" : "AWS::StackName" },
              "InstanceAZ",
            ]
          ]
        }
      }
    },

    "PublicIP": {
      "Description": "Public IP address of the newly created EC2 instance",
      "Value": { "Fn::GetAtt": [ "EC2Instance", "PublicIp" ] },
      "Condition": "IsPublicSubnet",
      "Export": {
        "Name": {
          "Fn::Join" : [
            "-",
            [
              { "Ref" : "AWS::StackName" },
              "InstancePublicIP",
            ]
          ]
        }
      }
    }
  }
}
