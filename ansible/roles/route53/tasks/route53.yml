---

- set_fact:
    stack_name: "route53-{{ region }}-stack"

- name: is_stack_present
  shell: aws cloudformation describe-stacks --region "{{ region }}" --stack-name "{{ stack_name }}"
  args:
    executable: /bin/bash
  register: is_stack_present
  ignore_errors: yes

- name: root_domain_hosted_zone
  shell: aws route53 list-hosted-zones | jq -r ".HostedZones[] | select(.Name==\"{{ root_domain }}.\") | .Id"
  args:
    executable: /bin/bash
  register: root_domain_id
  ignore_errors: yes

- name: "{{ stack_name }}"
  cloudformation:
    stack_name: "{{ stack_name }}"
    region: "{{ region }}"
    state: "{{ stack_status }}"
    template: "roles/route53/files/route53-cf.json"
    template_parameters:
      RootDomain: "{{ root_domain }}"
      RootDomainHostedZoneId: "{{ root_domain_id.stdout }}"
      SubDomainName: "{{ sub_domain_name }}"
      ElbStackName: "elb-with-vpc-{{ region }}-stack"
      ElbHostedZoneIdImportName: "ElasticLoadBalancerHostedZoneID"
      ElbDnsImportName: "ElasticLoadBalancerDNS"
  when: (stack_status == 'present' and root_domain_id|success) or (stack_status == 'absent' and is_stack_present|success)

- name: "collect-{{ stack_name }}"
  cloudformation_facts:
    stack_name: "{{ stack_name }}"
    all_facts: true
    region: "{{ region }}"
  when: stack_status == "present"

- set_fact:
    "{{ stack_name | regex_replace('[-.]', '_') }}_facts": "{{ cloudformation }}"
  when: not ansible_check_mode and stack_status == "present"
